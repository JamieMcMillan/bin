#!/bin/bash
#----------------------------------------------------------
#	Shopping List
#----------------------------------------------------------
#	
#	An interactive script to view or export a shopping
#	list
#	
#	Optional options are...
#
#	In-situ commands are described in the help function.
#	
#	Version 1.0
#	JM	9th August 2022
#	
#----------------------------------------------------------
#	Future features:
#
#		- Add catch for Ctrl+C from places
#		- Port to the charmbracelet
#		- Update shopping list contents
#		- Complete prerequisite check
#		- Finish header information
#		- 
#		- 
#		
#----------------------------------------------------------
#	Changelog:
#
#
#----------------------------------------------------------

shopt -s extglob
#----------------------------------
# Generate a unique job identifier
#----------------------------------

SCRIPT=$(basename ${BASH_SOURCE[0]})
UNIQUE="0"
job=$(printf "${SCRIPT}_${RANDOM}")
while [ "$UNIQUE" -ne "1" ]
do
        if [[ ! -f /tmp/$job ]]
        then
                UNIQUE="1"
        else
                (>&2 echo "${SCRIPT} warning: creating new identifier")
                job=$(printf "${SCRIPT}_${RANDOM}")
        fi
done


#--------------------------
# Check necessary installs
#--------------------------

# Update this
# gnuplot and bc
if [ "$(which gnuplot)" == "" ]
then
	printf "${SCRIPT} error: gnuplot has not been installed\n"
	exit 1
elif [ "$(which bc)" == "" ]
then
	printf "${SCRIPT} error: bc has not been installed\n"
	exit 1
fi

#------------------
# Initialisation Parameters
#------------------
templateList="${HOME}/Documents/Shopping/Template_List/templateShoppingList.txt"
temporaryList="/tmp/${job}_temporaryList.txt"
outFile="shoppingList$(date '+%Y%m%d')"

#------------------
# Command: Select categories
#------------------
promptSelect(){
	selectCategories
}
#-----------------
# Command: Export list
#-----------------
promptExport(){
	printf "${SCRIPT}: Exporting list\n"
	cp "$templateList" "$temporaryList"
	exportList

	exit 0
}

#-----------------
# Function: Prompt Multi Select
#-----------------
promptForMultiselect() {
	# From SO: https://stackoverflow.com/a/54261882/317605 (by https://stackoverflow.com/users/8207842/dols3m)
	# and from SO: https://stackoverflow.com/questions/45382472/
    # Terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()   { printf "$ESC[?25h"; }
    cursor_blink_off()  { printf "$ESC[?25l"; }
    cursor_to()         { printf "$ESC[$1;${2:-1}H"; }
    print_inactive()    { printf "$2   $1 "; }
    print_active()      { printf "$2  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()    { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()         {
      local key
      IFS= read -rsn1 key 2>/dev/null >&2
      if [[ $key = ""      ]]; then echo enter; fi;
      if [[ $key = $'\x20' ]]; then echo space; fi;
      if [[ $key = $'\x1b' ]]; then
        read -rsn2 key
        if [[ $key = [A ]]; then echo up;    fi;
        if [[ $key = [B ]]; then echo down;  fi;
      fi 
    }
    toggle_option()    {
      local arr_name=$1
      eval "local arr=(\"\${${arr_name}[@]}\")"
      local option=$2
      if [[ ${arr[option]} == true ]]; then
        arr[option]=
      else
        arr[option]=true
      fi
      eval $arr_name='("${arr[@]}")'
    }

    local retval=$1
    local options
    local defaults

    IFS=';' read -r -a options <<< "$2"
    if [[ -z $3 ]]; then
      defaults=()
    else
      IFS=';' read -r -a defaults <<< "$3"
    fi
    local selected=()

    for ((i=0; i<${#options[@]}; i++)); do
      selected+=("${defaults[i]:-false}")
      printf "\n"
    done

    # Determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - ${#options[@]}))

    # Ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local active=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for option in "${options[@]}"; do
            local prefix="[ ]"
            if [[ ${selected[idx]} == true ]]; then
              prefix="[x]"
            fi

            cursor_to $(($startrow + $idx))
            if [ $idx -eq $active ]; then
                print_active "$option" "$prefix"
            else
                print_inactive "$option" "$prefix"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            space)  toggle_option selected $active;;
            enter)  break;;
            up)     ((active--));
                    if [ $active -lt 0 ]; then active=$((${#options[@]} - 1)); fi;;
            down)   ((active++));
                    if [ $active -ge ${#options[@]} ]; then active=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    eval $retval='("${selected[@]}")'
}

#-----------------
# Function: Email list
#-----------------
emailList() {
	printf "${SCRIPT}: Shopping list emailed\n"

	fromEmail="jamie.mcmillan9@gmail.com"
	toEmail="jamie.mcmillan9@gmail.com, jamieishuman@hotmail.com, kathrinemcmillan93@gmail.com"

	echo "Shopping List" \
	  | mutt \
	  	-e "set from=$fromEmail" \
		-s "$outFile" \
		-a ${outFile}.* -- \
		"$toEmail"

}

#-----------------
# Function: Export active list
#-----------------
exportList(){
	if [ ! -f "$temporaryList" ] || [ $(wc -l "$temporaryList" | awk '{print $1}') -eq "0" ]
	then
		printf "${SCRIPT}: No file to  export\n"
	fi
	cp "$temporaryList" "${outFile}.txt"

	fold -w 120 -s ${outFile}.txt \
    	| a2ps --silent -1 -T 4 --header="${outFile}" --footer="" --stdin="${outFile}" --center-title="${outFile}" -f 11 -o ${outFile}.ps 

	ps2pdf ${outFile}.ps
	rm ${outFile}.ps

	emailList
}


#-------------
# Function: Select Categories
#-------------

selectCategories(){
  # Parse the categories into own file
  sed '/^\s/d;/^$/d' "$templateList" >| /tmp/${job}_categories
  readarray -t categories < /tmp/${job}_categories
  for i in "${!categories[@]}"; do
	categoriesString+="${categories[$i]};"
  done

  # Identify which categories should be returned
  printf "${SCRIPT}: Select categories with [SPACE] and hit [ENTER] when complete\n"
  promptForMultiselect SELECTED "$categoriesString"
  printf '\e[A\e[K'
  for i in "${!SELECTED[@]}"; do
	printf '\e[A\e[K'
	if [ "${SELECTED[$i]}" == "true" ]; then
		printf "${categories[$i]}\n" >> /tmp/${job}_selectedCategories
	fi
  done

  # Return the selected categories and their contents, then export
  >| "$temporaryList"
  while read selectedCategory
  do
	sed -n "/${selectedCategory}/,/^ *$/p" "$templateList" \
  		>> "$temporaryList"
  done <  /tmp/${job}_selectedCategories

  exportList
}

#--------------------
# Prompt interpreter
#--------------------

promptInterpreter(){
case $1 in
  e)
    promptExport
    ;;
  s)
    promptSelect
    ;;
  q)
    printf "${SCRIPT}: Quitting program\n"
    promptReturn="1"
    ;;
  h)
    promptHelp
    ;;
  *)
    printf "${SCRIPT}: Unknown command, please see help\n"
    ;;
esac
}



#------------------------
# Parse options and help
#------------------------

#Initialize variables to default values
#OPT_E=0

#Set fonts for help
NORM=$(tput sgr0)
BOLD=$(tput bold)
REV=$(tput smso)

#Help function
promptHelp() {
  echo -e \\n"Help documentation for ${BOLD}${SCRIPT}.${NORM}"\\n
  echo -e "${REV}Basic usage:${NORM} ${BOLD}$SCRIPT ${NORM}"\\n
  echo -e "Initialises the program and awaits command input.\\n"
  echo -e "Command line switches are optional. The following switches are recognized.\\n"
  echo -e "${REV}-e${NORM}         --${BOLD}Exports${NORM} a complete list to the working directory."
  echo -e "${REV}-h${NORM}         --Displays this ${BOLD}help${NORM} message. No further functions are performed."\\n
  echo -e "During operation, alphanumeric inputs are expected followed by a return.\\n"
  echo -e "Additional commands described by an alphabet letter can be used to perform the following actions:"\\n
  echo -e "${REV}e${NORM}          --${BOLD}Export${NORM} full shopping list."
  echo -e "${REV}s${NORM}          --${BOLD}Select${NORM} categories to export."
  echo -e "${REV}h${NORM}          --Prints help."
  echo -e "${REV}q${NORM}          --Quits the program.\\n"
}

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get my unrecognized option code to work.

while getopts :esh FLAG; do
  case $FLAG in
    e)  #Export full list
	  promptExport
      exit 0
      ;;
    s)  #Jump to selection
	  promptSelect
      exit 0
      ;;
    h)  #show help
      HELP
      exit 1
      ;;
    \?) #unrecognized option - show help
      printf "${SCRIPT} error: option -${BOLD}$OPTARG${NORM} not permitted\n"
      HELP
      exit 1
      ;;
  esac
done

#This tells getopts to move on to the next argument.
shift $((OPTIND-1))


#------------------
# Begin data input
#------------------

promptReturn="0"
while [ $promptReturn -ne "1" ]
do
	read -p "${SCRIPT}: Enter a command [h for help] " promptCommand
	promptInterpreter "$promptCommand"
done

rm /tmp/${job}* 2&> /dev/null
exit 0


