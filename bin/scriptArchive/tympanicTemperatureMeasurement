#!/bin/bash
#----------------------------------------------------------
#	Tympanic Temperature Measurement
#----------------------------------------------------------
#	
#	An interactive script to record and update a plot
#	with 
#	
#	
#	
#	Optional options are the 
#
#	In-situ commands are described in the help function.
#	
#	Version 1.0
#	JM	9th January 2022
#	
#----------------------------------------------------------
#	Future features:
#
#		- Log and record entries for JM, KM and MM
#		- Raise a continuous flag for inconsistent measurements
#		- Boundary conditions for calibrated instrument temperature range
#		- Account for uncertainties
#		- Remove previous data entry
#		- View calibration reference chart or patient chart
#		- Safe permanent backup of data somewhere else or hidden?
#		- Add catch for Ctrl+C from places
#		- Add limits of calibration range to 34.9 - 41.8
#		- 
#		
#----------------------------------------------------------
#	Changelog:
#
#
#----------------------------------------------------------

shopt -s extglob
#----------------------------------
# Generate a unique job identifier
#----------------------------------

SCRIPT=$(basename ${BASH_SOURCE[0]})
UNIQUE="0"
job=$(printf "${SCRIPT}_${RANDOM}")
while [ "$UNIQUE" -ne "1" ]
do
        if [[ ! -f /tmp/$job ]]
        then
                UNIQUE="1"
        else
                (>&2 echo "${SCRIPT} warning: creating new identifier")
                job=$(printf "${SCRIPT}_${RANDOM}")
        fi
done
#touch /tmp/${job}_{data,data_sorted}.csv


#--------------------------
# Check necessary installs
#--------------------------

# gnuplot and bc
if [ "$(which gnuplot)" == "" ]
then
	printf "${SCRIPT} error: gnuplot has not been installed\n"
	exit 1
elif [ "$(which bc)" == "" ]
then
	printf "${SCRIPT} error: bc has not been installed\n"
	exit 1
fi


#------------------------
# Parse options and help
#------------------------

#Initialize variables to default values
OPT_D=2

#Set fonts for help
NORM=$(tput sgr0)
BOLD=$(tput bold)
REV=$(tput smso)

#Help function
function HELP {
  echo -e \\n"Help documentation for ${BOLD}${SCRIPT}.${NORM}"\\n
  echo -e "${REV}Basic usage:${NORM} ${BOLD}$SCRIPT ${NORM}"\\n
  echo -e "Initialises the program and awaits command input."
  echo "Command line switches are optional. The following switches are recognized."
 # echo "${REV}-d${NORM}  --Sets a value for the number of Die ${BOLD}d${NORM} to be used. Default is ${BOLD}2${NORM}."
 # echo -e "${REV}-h${NORM}  --Displays this help message. No further functions are performed."\\n
  echo -e "During operation, alphanumeric inputs are expected (followed by a return) and this will be recorded and the records updated."
  echo -e "Additional commands described by an alphabet letter can be used to perform the following actions:"\\n
  echo -e "${REV}t${NORM}          --Prepare to enter a temperature measurement."
  echo -e "${REV}v${NORM}          --View all temperature measurements."
  echo -e "${REV}r${NORM}          --Removes the previous numeric entry."
  echo -e "${REV}e${NORM}          --Exports the current data log and plot."
  echo -e "${REV}h${NORM}          --Prints help."
  echo -e "${REV}q${NORM}          --Quits the program.\\n"
}

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get my unrecognized option code to work.

while getopts :h FLAG; do
  case $FLAG in
    h)  #show help
      HELP
      exit 1
      ;;
    \?) #unrecognized option - show help
      printf "${SCRIPT} error: option -${BOLD}$OPTARG${NORM} not permitted\n"
      HELP
      exit 1
      ;;
  esac
done

#This tells getopts to move on to the next argument.
shift $((OPTIND-1))


#----------------------
# Populate plot script
#----------------------

cat > /tmp/${job}_plot.gnu <<- EOF
set terminal postscript eps size 18,8 enhanced color font 'Helvetica,32'
set output '/tmp/${job}.eps'

set grid
set xlabel 'Date' 
set ylabel 'Measured Temperature / {/Symbol \260}C'

plot '/tmp/${job}_data.csv' using 1:2 with points lc 0 pt 2 ps 2 title 'JM'
EOF

#------------------
# Initialisation Parameters
#------------------
rootDir="${HOME}/Documents/Temperature_Monitoring/"
dataRecord="Measurement_Records/temperatureMeasurementRecord_"
dataChart="Measurement_Charts/temperatureMeasurementChart_"

#------------------
# Command: Temperature Entry
#------------------
promptTemperature(){
temperatureEntry
}
#------------------
# Command: View
#------------------
promptView(){
# This needs completing
printf "This command needs completing\n"
}
#------------------
# Command: Remove
#------------------
promptRemove(){
if [ -f "/tmp/${job}_data.csv" ]
then
	printf "${SCRIPT}: Deleting previous entry\n"
	sed -i '$ d' /tmp/${job}_data.csv
else
	printf "${SCRIPT}: No record to remove\n"
fi
}
#-----------------
# Command: Export
#-----------------
promptExport(){
if [ -f "/tmp/${job}_data.csv" ]
then
	printf "${SCRIPT}: Exporting record ${SCRIPT}_$(date '+%Y%m%d_%H%M%S')\n"
	cp /tmp/${job}_data.csv ./${SCRIPT}_$(date '+%Y%m%d_%H%M%S').csv
	cp /tmp/${job}.eps ./${SCRIPT}_$(date '+%Y%m%d_%H%M%S').eps
else
	printf "${SCRIPT}: No file to  export\n"
fi
}
#------------------
# Command: Numeric
#------------------
promptNumeric(){
printf "Please select option 't' and the patient to enter a temperature reading\n"
}

#-------------
# Update plot
#-------------

updatePlot(){
gnuplot /tmp/${job}_plot.gnu 2&> /dev/null
}


#-------------
# Temperature Entry
#-------------

temperatureEntry(){
  read -p "${SCRIPT}: Enter patient name [j] JM | [k] KM | [m] MM: " patientNamePrompt
  case $patientNamePrompt in
    j)
      patientName="JM"
      ;;
    J)
      patientName="JM"
      ;;
    k)
      patientName="KM"
      ;;
    K)
      patientName="KM"
      ;;
    m)
      patientName="MM"
      ;;
    M)
      patientName="MM"
      ;;
    *)
      printf "${SCRIPT}: Unknown patient, please try again\n"
	  break
      ;;
  esac

  read -p "${SCRIPT}: Enter patient temperature: " patientTemperature

  floatTest='^[0-9]+([.][0-9]+)?$'
  if ! [[ "$patientTemperature" =~ $floatTest ]]
  then
	printf "${SCRIPT}: Temperature not accepted\n" >&2
  else
	printf 	"${SCRIPT}: Temperature accepted\n"
	printf 	"%s\t%3.2f\n" \
	  		"$(date '+%Y%m%d')" \
			"$(temperatureCalibration $patientTemperature)" \
			| tee -a ${rootDir}${dataRecord}${patientName}.csv
  fi
}



#-------------
# Temperature Calibration
#-------------

temperatureCalibration(){
  # From calibration 
local a="-0.171378"
local b="14.5678"
local c="-267.538"

echo "($a * $1^2) + ($b * $1^1) + ($c * $1^0)" \
  | bc
}

#--------------------
# Prompt interpreter
#--------------------

promptInterpreter(){
case $1 in
  t)
    promptTemperature
    ;;
  v)
    promptView
    ;;
  r)
    promptRemove
    ;;
  e)
    promptExport
    ;;
  q)
    printf "${SCRIPT}: Quitting program\n"
    promptReturn="1"
    ;;
  (+([0-9]))
    promptNumeric $1
    ;;
  h)
    HELP
    ;;
  *)
    printf "${SCRIPT}: Unknown command, please see help\n"
    ;;
esac
}


#------------------
# Begin data input
#------------------

#updatePlot
#evince /tmp/${job}.eps > /dev/null 2>&1 &
#plotPID="$!"
promptReturn="0"
while [ $promptReturn -ne "1" ]
do
#	updatePlot
	read -p "${SCRIPT}: Enter a command [h for help] " promptCommand
	promptInterpreter "$promptCommand"
done

#kill $plotPID
rm /tmp/${job}*
exit 0


