#!/opt/homebrew/bin/python3

import warnings
import argparse
import numpy as np
import numpy.ma as ma
import rasterio as rio
from PIL import Image
from matplotlib.colors import LinearSegmentedColormap
from typing import Optional


class Show():
    input_filepath: str
    output_filepath: Optional[str] = None

    def parse_arguments(self):
        parser = argparse.ArgumentParser()

        parser.add_argument(
            'input'
        )
        parser.add_argument(
            "-o",
            "--output",
            nargs=1,
            help="Output file name",
            type=str,
        )

        args = parser.parse_args()
        self.input_filepath = args.input
        if args.output:
            self.output_filepath = args.output[0]

    def gen_new_citrus_cmap(self):
        return LinearSegmentedColormap.from_list(
            "NewCitrus",
            ["#000442", "#3E83B3", "#FFC83C", "#FF5B00"]
        )
        
    def image_to_8_bit(self, im: ma.MaskedArray, pct_l: int = 2, pct_h: int = 98) -> ma.MaskedArray:
        mask = im.mask
        unmasked = im[mask == 0]
        im = im - unmasked.mean()
        im = im - im.min()
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            pct2 = np.percentile(im[mask == 0], pct_l)
            pct98 = np.percentile(im[mask == 0], pct_h)

        bit8 = im.clip(pct2, pct98)
        bit8 = bit8 - bit8.min()
        bit8 = self.gen_new_citrus_cmap()(bit8 / bit8.max())
        bit8 = (bit8 * 255).astype(np.uint8)
        bit8 = np.where(bit8 == 0, 1, bit8)
        return bit8


def main() -> None:
    show = Show()
    show.parse_arguments()
    
    d = show.image_to_8_bit(rio.open(show.input_filepath).read(1, masked=True))
    im = Image.fromarray(d)
    im.show()

    if show.output_filepath:
        Image.fromarray(d).save(show.output_filepath)


if __name__ == '__main__':
    main()
